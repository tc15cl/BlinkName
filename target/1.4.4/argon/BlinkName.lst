
d:/GDRIVE/School/DEVIT_UNI/2020_T1/SIT210/OnTrack/SIT210-02.1P/BlinkName/target/1.4.4/argon/BlinkName.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000015f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000156a8  2**0
                  CONTENTS
  4 .data         0000006c  2003e458  000d5610  0000e458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000032c  2003e4c4  2003e4c4  0001e4c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d567c  000d567c  0001567c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d56a4  000d56a4  000156a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bd1d8  00000000  00000000  000156a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ef8b  00000000  00000000  000d2880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019173  00000000  00000000  000e180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020e0  00000000  00000000  000fa97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003cc0  00000000  00000000  000fca5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003323d  00000000  00000000  0010071e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000240b5  00000000  00000000  0013395b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fbc35  00000000  00000000  00157a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000beac  00000000  00000000  00253648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f907 	bl	d5240 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f90c 	bl	d5256 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e458 	.word	0x2003e458
   d4048:	000d5610 	.word	0x000d5610
   d404c:	2003e4c4 	.word	0x2003e4c4
   d4050:	2003e4c4 	.word	0x2003e4c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fb81 	bl	d4760 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5604 	.word	0x000d5604
   d4080:	000d55c8 	.word	0x000d55c8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f821 	bl	d40d0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bb33 	b.w	d46fc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba07 	b.w	d44a8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba0d 	b.w	d44b8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba0b 	b.w	d44b8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:

// Last time, we only needed to declare pins in the setup function.
// This time, we are also going to register our Particle function

void setup()
{
   d40b4:	b510      	push	{r4, lr}

   //Configuring led1 to be an output
   pinMode(led1, OUTPUT);
   d40b6:	4c05      	ldr	r4, [pc, #20]	; (d40cc <setup+0x18>)
   d40b8:	2101      	movs	r1, #1
   d40ba:	8820      	ldrh	r0, [r4, #0]
   d40bc:	f000 fef6 	bl	d4eac <pinMode>


   //Initialise led1 to be off
   digitalWrite(led1, LOW);
   d40c0:	8820      	ldrh	r0, [r4, #0]
   d40c2:	2100      	movs	r1, #0

}
   d40c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   //Configuring led1 to be an output
   pinMode(led1, OUTPUT);


   //Initialise led1 to be off
   digitalWrite(led1, LOW);
   d40c8:	f000 bf01 	b.w	d4ece <digitalWrite>
   d40cc:	2003e458 	.word	0x2003e458

000d40d0 <loop>:
//Loop through TIM in morse code DASH-DOT-DOT-DASH(- .. -)
//DASH = 3000ms
//DOT = 1000ms

void loop()
{
   d40d0:	b510      	push	{r4, lr}
	//Switch led1 on for 3 seconds
	digitalWrite(led1, HIGH);
   d40d2:	4c21      	ldr	r4, [pc, #132]	; (d4158 <loop+0x88>)
   d40d4:	2101      	movs	r1, #1
   d40d6:	8820      	ldrh	r0, [r4, #0]
   d40d8:	f000 fef9 	bl	d4ece <digitalWrite>
	delay(2000);
   d40dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d40e0:	f000 face 	bl	d4680 <delay>

	//Switch led1 off for 1 second
	digitalWrite(led1, LOW);
   d40e4:	2100      	movs	r1, #0
   d40e6:	8820      	ldrh	r0, [r4, #0]
   d40e8:	f000 fef1 	bl	d4ece <digitalWrite>
  delay(500);
   d40ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d40f0:	f000 fac6 	bl	d4680 <delay>

  	//Switch led1 on for 1 seconds
	digitalWrite(led1, HIGH);
   d40f4:	2101      	movs	r1, #1
   d40f6:	8820      	ldrh	r0, [r4, #0]
   d40f8:	f000 fee9 	bl	d4ece <digitalWrite>
	delay(1000);
   d40fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4100:	f000 fabe 	bl	d4680 <delay>

	//Switch led1 off for 1 second
	digitalWrite(led1, LOW);
   d4104:	2100      	movs	r1, #0
   d4106:	8820      	ldrh	r0, [r4, #0]
   d4108:	f000 fee1 	bl	d4ece <digitalWrite>
  delay(500);
   d410c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4110:	f000 fab6 	bl	d4680 <delay>

    	//Switch led1 on for 1 seconds
	digitalWrite(led1, HIGH);
   d4114:	2101      	movs	r1, #1
   d4116:	8820      	ldrh	r0, [r4, #0]
   d4118:	f000 fed9 	bl	d4ece <digitalWrite>
	delay(1000);
   d411c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4120:	f000 faae 	bl	d4680 <delay>

	//Switch led1 off for 1 second
	digitalWrite(led1, LOW);
   d4124:	2100      	movs	r1, #0
   d4126:	8820      	ldrh	r0, [r4, #0]
   d4128:	f000 fed1 	bl	d4ece <digitalWrite>
  delay(500);
   d412c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4130:	f000 faa6 	bl	d4680 <delay>

  	//Switch led1 on for 3 seconds
	digitalWrite(led1, HIGH);
   d4134:	2101      	movs	r1, #1
   d4136:	8820      	ldrh	r0, [r4, #0]
   d4138:	f000 fec9 	bl	d4ece <digitalWrite>
	delay(2000);
   d413c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4140:	f000 fa9e 	bl	d4680 <delay>

	// Wait 4 seconds before repeating sequence.
  digitalWrite(led1, LOW);
   d4144:	8820      	ldrh	r0, [r4, #0]
   d4146:	2100      	movs	r1, #0
   d4148:	f000 fec1 	bl	d4ece <digitalWrite>
	delay(4000);
   d414c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0

   d4150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(led1, HIGH);
	delay(2000);

	// Wait 4 seconds before repeating sequence.
  digitalWrite(led1, LOW);
	delay(4000);
   d4154:	f000 ba94 	b.w	d4680 <delay>
   d4158:	2003e458 	.word	0x2003e458

000d415c <_GLOBAL__sub_I_led1>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d415c:	f000 b810 	b.w	d4180 <HAL_Pin_Map>

000d4160 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4160:	b508      	push	{r3, lr}
   d4162:	4b02      	ldr	r3, [pc, #8]	; (d416c <netdb_freeaddrinfo+0xc>)
   d4164:	681b      	ldr	r3, [r3, #0]
   d4166:	689b      	ldr	r3, [r3, #8]
   d4168:	9301      	str	r3, [sp, #4]
   d416a:	bd08      	pop	{r3, pc}
   d416c:	00030268 	.word	0x00030268

000d4170 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4170:	b508      	push	{r3, lr}
   d4172:	4b02      	ldr	r3, [pc, #8]	; (d417c <netdb_getaddrinfo+0xc>)
   d4174:	681b      	ldr	r3, [r3, #0]
   d4176:	68db      	ldr	r3, [r3, #12]
   d4178:	9301      	str	r3, [sp, #4]
   d417a:	bd08      	pop	{r3, pc}
   d417c:	00030268 	.word	0x00030268

000d4180 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4180:	b508      	push	{r3, lr}
   d4182:	4b02      	ldr	r3, [pc, #8]	; (d418c <HAL_Pin_Map+0xc>)
   d4184:	681b      	ldr	r3, [r3, #0]
   d4186:	681b      	ldr	r3, [r3, #0]
   d4188:	9301      	str	r3, [sp, #4]
   d418a:	bd08      	pop	{r3, pc}
   d418c:	0003022c 	.word	0x0003022c

000d4190 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4190:	b508      	push	{r3, lr}
   d4192:	4b02      	ldr	r3, [pc, #8]	; (d419c <HAL_Pin_Mode+0xc>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	689b      	ldr	r3, [r3, #8]
   d4198:	9301      	str	r3, [sp, #4]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	0003022c 	.word	0x0003022c

000d41a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <HAL_Get_Pin_Mode+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	68db      	ldr	r3, [r3, #12]
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	0003022c 	.word	0x0003022c

000d41b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <HAL_GPIO_Write+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	691b      	ldr	r3, [r3, #16]
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	0003022c 	.word	0x0003022c

000d41c0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <HAL_SPI_Init+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	69db      	ldr	r3, [r3, #28]
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	00030230 	.word	0x00030230

000d41d0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <HAL_SPI_Is_Enabled+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	6a1b      	ldr	r3, [r3, #32]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	00030230 	.word	0x00030230

000d41e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <HAL_RNG_GetRandomNumber+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	685b      	ldr	r3, [r3, #4]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	00030218 	.word	0x00030218

000d41f0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	695b      	ldr	r3, [r3, #20]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	00030218 	.word	0x00030218

000d4200 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <os_thread_is_current+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	689b      	ldr	r3, [r3, #8]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030248 	.word	0x00030248

000d4210 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <os_thread_join+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	691b      	ldr	r3, [r3, #16]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030248 	.word	0x00030248

000d4220 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <os_thread_cleanup+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	695b      	ldr	r3, [r3, #20]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030248 	.word	0x00030248

000d4230 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <os_mutex_create+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030248 	.word	0x00030248

000d4240 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <os_mutex_recursive_create+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030248 	.word	0x00030248

000d4250 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <inet_inet_ntop+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	695b      	ldr	r3, [r3, #20]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030264 	.word	0x00030264

000d4260 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <HAL_USART_Init+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	681b      	ldr	r3, [r3, #0]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	0003023c 	.word	0x0003023c

000d4270 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <HAL_USART_Write_Data+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	68db      	ldr	r3, [r3, #12]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	0003023c 	.word	0x0003023c

000d4280 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <HAL_USART_Available_Data+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	691b      	ldr	r3, [r3, #16]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	0003023c 	.word	0x0003023c

000d4290 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <HAL_USART_Read_Data+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	695b      	ldr	r3, [r3, #20]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003023c 	.word	0x0003023c

000d42a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_USART_Peek_Data+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	699b      	ldr	r3, [r3, #24]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003023c 	.word	0x0003023c

000d42b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_USART_Flush_Data+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	69db      	ldr	r3, [r3, #28]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003023c 	.word	0x0003023c

000d42c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_USART_Is_Enabled+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	6a1b      	ldr	r3, [r3, #32]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003023c 	.word	0x0003023c

000d42d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_USART_Available_Data_For_Write+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	0003023c 	.word	0x0003023c

000d42e0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_I2C_Write_Data+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	6a1b      	ldr	r3, [r3, #32]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030228 	.word	0x00030228

000d42f0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <HAL_I2C_Available_Data+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030228 	.word	0x00030228

000d4300 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <HAL_I2C_Read_Data+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030228 	.word	0x00030228

000d4310 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_I2C_Peek_Data+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030228 	.word	0x00030228

000d4320 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_I2C_Flush_Data+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030228 	.word	0x00030228

000d4330 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_I2C_Is_Enabled+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030228 	.word	0x00030228

000d4340 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_I2C_Init+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030228 	.word	0x00030228

000d4350 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USB_USART_Init+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	681b      	ldr	r3, [r3, #0]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003024c 	.word	0x0003024c

000d4360 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USB_USART_Available_Data+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	691b      	ldr	r3, [r3, #16]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003024c 	.word	0x0003024c

000d4370 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	695b      	ldr	r3, [r3, #20]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Receive_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	699b      	ldr	r3, [r3, #24]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Send_Data+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	69db      	ldr	r3, [r3, #28]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Flush_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	6a1b      	ldr	r3, [r3, #32]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <set_system_mode+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	685b      	ldr	r3, [r3, #4]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030220 	.word	0x00030220

000d43c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <system_delay_ms+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	695b      	ldr	r3, [r3, #20]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030220 	.word	0x00030220

000d43d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b03      	ldr	r3, [pc, #12]	; (d43e0 <system_ctrl_set_app_request_handler+0x10>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d43da:	9301      	str	r3, [sp, #4]
   d43dc:	bd08      	pop	{r3, pc}
   d43de:	0000      	.short	0x0000
   d43e0:	00030220 	.word	0x00030220

000d43e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b03      	ldr	r3, [pc, #12]	; (d43f4 <system_ctrl_set_result+0x10>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d43ee:	9301      	str	r3, [sp, #4]
   d43f0:	bd08      	pop	{r3, pc}
   d43f2:	0000      	.short	0x0000
   d43f4:	00030220 	.word	0x00030220

000d43f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <network_connect+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	685b      	ldr	r3, [r3, #4]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030240 	.word	0x00030240

000d4408 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <network_connecting+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	689b      	ldr	r3, [r3, #8]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030240 	.word	0x00030240

000d4418 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <network_disconnect+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	68db      	ldr	r3, [r3, #12]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030240 	.word	0x00030240

000d4428 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <network_ready+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	691b      	ldr	r3, [r3, #16]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030240 	.word	0x00030240

000d4438 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <network_on+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	695b      	ldr	r3, [r3, #20]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030240 	.word	0x00030240

000d4448 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <network_off+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	699b      	ldr	r3, [r3, #24]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030240 	.word	0x00030240

000d4458 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <network_listen+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	69db      	ldr	r3, [r3, #28]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030240 	.word	0x00030240

000d4468 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <network_listening+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6a1b      	ldr	r3, [r3, #32]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030240 	.word	0x00030240

000d4478 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <network_set_listen_timeout+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030240 	.word	0x00030240

000d4488 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <network_get_listen_timeout+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030240 	.word	0x00030240

000d4498 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030244 	.word	0x00030244

000d44a8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <malloc+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	681b      	ldr	r3, [r3, #0]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003021c 	.word	0x0003021c

000d44b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <free+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	685b      	ldr	r3, [r3, #4]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003021c 	.word	0x0003021c

000d44c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d44c8:	2200      	movs	r2, #0
   d44ca:	4611      	mov	r1, r2
   d44cc:	6840      	ldr	r0, [r0, #4]
   d44ce:	f7ff bfcb 	b.w	d4468 <network_listening>

000d44d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d44d2:	2200      	movs	r2, #0
   d44d4:	4611      	mov	r1, r2
   d44d6:	6840      	ldr	r0, [r0, #4]
   d44d8:	f7ff bfd6 	b.w	d4488 <network_get_listen_timeout>

000d44dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d44dc:	2200      	movs	r2, #0
   d44de:	6840      	ldr	r0, [r0, #4]
   d44e0:	f7ff bfca 	b.w	d4478 <network_set_listen_timeout>

000d44e4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d44e4:	2200      	movs	r2, #0
   d44e6:	f081 0101 	eor.w	r1, r1, #1
   d44ea:	6840      	ldr	r0, [r0, #4]
   d44ec:	f7ff bfb4 	b.w	d4458 <network_listen>

000d44f0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d44f0:	2300      	movs	r3, #0
   d44f2:	461a      	mov	r2, r3
   d44f4:	4619      	mov	r1, r3
   d44f6:	6840      	ldr	r0, [r0, #4]
   d44f8:	f7ff bfa6 	b.w	d4448 <network_off>

000d44fc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d44fc:	2300      	movs	r3, #0
   d44fe:	461a      	mov	r2, r3
   d4500:	4619      	mov	r1, r3
   d4502:	6840      	ldr	r0, [r0, #4]
   d4504:	f7ff bf98 	b.w	d4438 <network_on>

000d4508 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4508:	2200      	movs	r2, #0
   d450a:	4611      	mov	r1, r2
   d450c:	6840      	ldr	r0, [r0, #4]
   d450e:	f7ff bf8b 	b.w	d4428 <network_ready>

000d4512 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4512:	2200      	movs	r2, #0
   d4514:	4611      	mov	r1, r2
   d4516:	6840      	ldr	r0, [r0, #4]
   d4518:	f7ff bf76 	b.w	d4408 <network_connecting>

000d451c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d451c:	2200      	movs	r2, #0
   d451e:	2102      	movs	r1, #2
   d4520:	6840      	ldr	r0, [r0, #4]
   d4522:	f7ff bf79 	b.w	d4418 <network_disconnect>

000d4526 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4526:	2300      	movs	r3, #0
   d4528:	461a      	mov	r2, r3
   d452a:	6840      	ldr	r0, [r0, #4]
   d452c:	f7ff bf64 	b.w	d43f8 <network_connect>

000d4530 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4530:	4b02      	ldr	r3, [pc, #8]	; (d453c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4532:	2203      	movs	r2, #3
   d4534:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4536:	4a02      	ldr	r2, [pc, #8]	; (d4540 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4538:	601a      	str	r2, [r3, #0]
   d453a:	4770      	bx	lr
   d453c:	2003e4c8 	.word	0x2003e4c8
   d4540:	000d52e4 	.word	0x000d52e4

000d4544 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4544:	4770      	bx	lr

000d4546 <_ZN8SPIClassD0Ev>:
   d4546:	b510      	push	{r4, lr}
   d4548:	2110      	movs	r1, #16
   d454a:	4604      	mov	r4, r0
   d454c:	f000 fd1f 	bl	d4f8e <_ZdlPvj>
   d4550:	4620      	mov	r0, r4
   d4552:	bd10      	pop	{r4, pc}

000d4554 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4554:	b570      	push	{r4, r5, r6, lr}
   d4556:	4b08      	ldr	r3, [pc, #32]	; (d4578 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4558:	6003      	str	r3, [r0, #0]
   d455a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d455c:	2500      	movs	r5, #0
   d455e:	460e      	mov	r6, r1
   d4560:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4564:	f7ff fe64 	bl	d4230 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4568:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d456a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d456c:	f7ff fe28 	bl	d41c0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4570:	60a5      	str	r5, [r4, #8]
}
   d4572:	4620      	mov	r0, r4
   d4574:	bd70      	pop	{r4, r5, r6, pc}
   d4576:	bf00      	nop
   d4578:	000d5318 	.word	0x000d5318

000d457c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d457c:	7900      	ldrb	r0, [r0, #4]
   d457e:	f7ff be27 	b.w	d41d0 <HAL_SPI_Is_Enabled>
	...

000d4584 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4584:	4b04      	ldr	r3, [pc, #16]	; (d4598 <_GLOBAL__sub_I_System+0x14>)
   d4586:	2000      	movs	r0, #0
   d4588:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d458c:	7018      	strb	r0, [r3, #0]
   d458e:	8058      	strh	r0, [r3, #2]
   d4590:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4592:	f7ff bf0d 	b.w	d43b0 <set_system_mode>
   d4596:	bf00      	nop
   d4598:	2003e4d0 	.word	0x2003e4d0

000d459c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d459c:	4802      	ldr	r0, [pc, #8]	; (d45a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d459e:	2300      	movs	r3, #0
   d45a0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d45a2:	f7ff be4d 	b.w	d4240 <os_mutex_recursive_create>
   d45a6:	bf00      	nop
   d45a8:	2003e4d8 	.word	0x2003e4d8

000d45ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d45ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d45ae:	4606      	mov	r6, r0
   d45b0:	460d      	mov	r5, r1
   d45b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d45b4:	2400      	movs	r4, #0
  while (size--) {
   d45b6:	42bd      	cmp	r5, r7
   d45b8:	d00c      	beq.n	d45d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d45ba:	6833      	ldr	r3, [r6, #0]
   d45bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d45c0:	689b      	ldr	r3, [r3, #8]
   d45c2:	4630      	mov	r0, r6
   d45c4:	4798      	blx	r3
     if (chunk>=0)
   d45c6:	2800      	cmp	r0, #0
   d45c8:	db01      	blt.n	d45ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d45ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d45cc:	e7f3      	b.n	d45b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d45ce:	2c00      	cmp	r4, #0
   d45d0:	bf08      	it	eq
   d45d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d45d4:	4620      	mov	r0, r4
   d45d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d45d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d45d8:	b570      	push	{r4, r5, r6, lr}
   d45da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d45dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d45de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d45e0:	b149      	cbz	r1, d45f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d45e2:	f000 fe69 	bl	d52b8 <strlen>
   d45e6:	682b      	ldr	r3, [r5, #0]
   d45e8:	4602      	mov	r2, r0
   d45ea:	4621      	mov	r1, r4
   d45ec:	4628      	mov	r0, r5
   d45ee:	68db      	ldr	r3, [r3, #12]
    }
   d45f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d45f4:	4718      	bx	r3
    }
   d45f6:	bd70      	pop	{r4, r5, r6, pc}

000d45f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d45f8:	6803      	ldr	r3, [r0, #0]
   d45fa:	689b      	ldr	r3, [r3, #8]
   d45fc:	4718      	bx	r3

000d45fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d45fe:	b530      	push	{r4, r5, lr}
   d4600:	b08b      	sub	sp, #44	; 0x2c
   d4602:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4604:	2100      	movs	r1, #0
   d4606:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d460a:	2a01      	cmp	r2, #1
   d460c:	bf98      	it	ls
   d460e:	220a      	movls	r2, #10
   d4610:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4614:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4618:	fb05 3312 	mls	r3, r5, r2, r3
   d461c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4620:	2b09      	cmp	r3, #9
   d4622:	bf94      	ite	ls
   d4624:	3330      	addls	r3, #48	; 0x30
   d4626:	3337      	addhi	r3, #55	; 0x37
   d4628:	b2db      	uxtb	r3, r3
   d462a:	4621      	mov	r1, r4
   d462c:	f804 3901 	strb.w	r3, [r4], #-1
   d4630:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4632:	2d00      	cmp	r5, #0
   d4634:	d1ee      	bne.n	d4614 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4636:	f7ff ffcf 	bl	d45d8 <_ZN5Print5writeEPKc>
}
   d463a:	b00b      	add	sp, #44	; 0x2c
   d463c:	bd30      	pop	{r4, r5, pc}

000d463e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d463e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4640:	b92a      	cbnz	r2, d464e <_ZN5Print5printEmi+0x10>
   d4642:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4644:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4648:	689b      	ldr	r3, [r3, #8]
   d464a:	b2c9      	uxtb	r1, r1
   d464c:	4718      	bx	r3
  else return printNumber(n, base);
   d464e:	b2d2      	uxtb	r2, r2
}
   d4650:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4654:	f7ff bfd3 	b.w	d45fe <_ZN5Print11printNumberEmh>

000d4658 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4658:	f7ff bff1 	b.w	d463e <_ZN5Print5printEmi>

000d465c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d465c:	4b01      	ldr	r3, [pc, #4]	; (d4664 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d465e:	4a02      	ldr	r2, [pc, #8]	; (d4668 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4660:	601a      	str	r2, [r3, #0]
   d4662:	4770      	bx	lr
   d4664:	2003e4dc 	.word	0x2003e4dc
   d4668:	000d5393 	.word	0x000d5393

000d466c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d466c:	4b02      	ldr	r3, [pc, #8]	; (d4678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d466e:	681a      	ldr	r2, [r3, #0]
   d4670:	4b02      	ldr	r3, [pc, #8]	; (d467c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4672:	601a      	str	r2, [r3, #0]
   d4674:	4770      	bx	lr
   d4676:	bf00      	nop
   d4678:	2003e45c 	.word	0x2003e45c
   d467c:	2003e4e0 	.word	0x2003e4e0

000d4680 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4680:	2100      	movs	r1, #0
   d4682:	f7ff be9d 	b.w	d43c0 <system_delay_ms>

000d4686 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4686:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4688:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d468a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d468c:	b113      	cbz	r3, d4694 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d468e:	2203      	movs	r2, #3
   d4690:	4601      	mov	r1, r0
   d4692:	4798      	blx	r3
    }
   d4694:	4620      	mov	r0, r4
   d4696:	bd10      	pop	{r4, pc}

000d4698 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4698:	b510      	push	{r4, lr}
   d469a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d469c:	f7ff fff3 	bl	d4686 <_ZNSt14_Function_baseD1Ev>
   d46a0:	4620      	mov	r0, r4
   d46a2:	bd10      	pop	{r4, pc}

000d46a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d46a4:	4803      	ldr	r0, [pc, #12]	; (d46b4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d46a6:	4a04      	ldr	r2, [pc, #16]	; (d46b8 <_GLOBAL__sub_I_RGB+0x14>)
   d46a8:	4904      	ldr	r1, [pc, #16]	; (d46bc <_GLOBAL__sub_I_RGB+0x18>)
   d46aa:	2300      	movs	r3, #0
   d46ac:	6083      	str	r3, [r0, #8]
   d46ae:	f000 bc69 	b.w	d4f84 <__aeabi_atexit>
   d46b2:	bf00      	nop
   d46b4:	2003e4e4 	.word	0x2003e4e4
   d46b8:	2003e4c4 	.word	0x2003e4c4
   d46bc:	000d4699 	.word	0x000d4699

000d46c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d46c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d46c2:	4b0c      	ldr	r3, [pc, #48]	; (d46f4 <serialEventRun+0x34>)
   d46c4:	b133      	cbz	r3, d46d4 <serialEventRun+0x14>
   d46c6:	f000 f935 	bl	d4934 <_Z16_fetch_usbserialv>
   d46ca:	6803      	ldr	r3, [r0, #0]
   d46cc:	691b      	ldr	r3, [r3, #16]
   d46ce:	4798      	blx	r3
   d46d0:	2800      	cmp	r0, #0
   d46d2:	dc09      	bgt.n	d46e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d46d4:	4b08      	ldr	r3, [pc, #32]	; (d46f8 <serialEventRun+0x38>)
   d46d6:	b163      	cbz	r3, d46f2 <serialEventRun+0x32>
   d46d8:	f000 f9ae 	bl	d4a38 <_Z22__fetch_global_Serial1v>
   d46dc:	6803      	ldr	r3, [r0, #0]
   d46de:	691b      	ldr	r3, [r3, #16]
   d46e0:	4798      	blx	r3
   d46e2:	2800      	cmp	r0, #0
   d46e4:	dc03      	bgt.n	d46ee <serialEventRun+0x2e>
   d46e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d46e8:	f3af 8000 	nop.w
   d46ec:	e7f2      	b.n	d46d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d46ee:	f3af 8000 	nop.w
   d46f2:	bd08      	pop	{r3, pc}
	...

000d46fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d46fc:	b508      	push	{r3, lr}
	serialEventRun();
   d46fe:	f7ff ffdf 	bl	d46c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4702:	f7ff fd75 	bl	d41f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4706:	4b01      	ldr	r3, [pc, #4]	; (d470c <_post_loop+0x10>)
   d4708:	6018      	str	r0, [r3, #0]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	2003e734 	.word	0x2003e734

000d4710 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4710:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4712:	2300      	movs	r3, #0
   d4714:	9300      	str	r3, [sp, #0]
   d4716:	461a      	mov	r2, r3
   d4718:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d471c:	f7ff fe62 	bl	d43e4 <system_ctrl_set_result>
}
   d4720:	b003      	add	sp, #12
   d4722:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4728 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4728:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d472a:	8843      	ldrh	r3, [r0, #2]
   d472c:	2b0a      	cmp	r3, #10
   d472e:	d008      	beq.n	d4742 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4730:	2b50      	cmp	r3, #80	; 0x50
   d4732:	d109      	bne.n	d4748 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4734:	4b09      	ldr	r3, [pc, #36]	; (d475c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4736:	681b      	ldr	r3, [r3, #0]
   d4738:	b13b      	cbz	r3, d474a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d473a:	b003      	add	sp, #12
   d473c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4740:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4742:	f7ff ffe5 	bl	d4710 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4746:	e006      	b.n	d4756 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4748:	2300      	movs	r3, #0
   d474a:	9300      	str	r3, [sp, #0]
   d474c:	461a      	mov	r2, r3
   d474e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4752:	f7ff fe47 	bl	d43e4 <system_ctrl_set_result>
        break;
    }
}
   d4756:	b003      	add	sp, #12
   d4758:	f85d fb04 	ldr.w	pc, [sp], #4
   d475c:	2003e4f4 	.word	0x2003e4f4

000d4760 <module_user_init_hook>:

void module_user_init_hook()
{
   d4760:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4762:	f7ff fd3d 	bl	d41e0 <HAL_RNG_GetRandomNumber>
   d4766:	4604      	mov	r4, r0
    srand(seed);
   d4768:	f000 fd7e 	bl	d5268 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d476c:	4b07      	ldr	r3, [pc, #28]	; (d478c <module_user_init_hook+0x2c>)
   d476e:	b113      	cbz	r3, d4776 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4770:	4620      	mov	r0, r4
   d4772:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4776:	2100      	movs	r1, #0
   d4778:	4804      	ldr	r0, [pc, #16]	; (d478c <module_user_init_hook+0x2c>)
   d477a:	f7ff fe8d 	bl	d4498 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d477e:	2100      	movs	r1, #0
   d4780:	4803      	ldr	r0, [pc, #12]	; (d4790 <module_user_init_hook+0x30>)
}
   d4782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4786:	f7ff be23 	b.w	d43d0 <system_ctrl_set_app_request_handler>
   d478a:	bf00      	nop
   d478c:	00000000 	.word	0x00000000
   d4790:	000d4729 	.word	0x000d4729

000d4794 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4794:	4770      	bx	lr

000d4796 <_ZN9IPAddressD0Ev>:
   d4796:	b510      	push	{r4, lr}
   d4798:	2118      	movs	r1, #24
   d479a:	4604      	mov	r4, r0
   d479c:	f000 fbf7 	bl	d4f8e <_ZdlPvj>
   d47a0:	4620      	mov	r0, r4
   d47a2:	bd10      	pop	{r4, pc}

000d47a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47a6:	7d03      	ldrb	r3, [r0, #20]
   d47a8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47aa:	b08d      	sub	sp, #52	; 0x34
   d47ac:	460e      	mov	r6, r1
   d47ae:	f100 0704 	add.w	r7, r0, #4
   d47b2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47b6:	d002      	beq.n	d47be <_ZNK9IPAddress7printToER5Print+0x1a>
   d47b8:	f100 0508 	add.w	r5, r0, #8
   d47bc:	e018      	b.n	d47f0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47be:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47c0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47c2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47c6:	232f      	movs	r3, #47	; 0x2f
   d47c8:	462a      	mov	r2, r5
   d47ca:	200a      	movs	r0, #10
   d47cc:	f7ff fd40 	bl	d4250 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d47d0:	4628      	mov	r0, r5
   d47d2:	f000 fd71 	bl	d52b8 <strlen>
   d47d6:	6833      	ldr	r3, [r6, #0]
   d47d8:	4602      	mov	r2, r0
   d47da:	68db      	ldr	r3, [r3, #12]
   d47dc:	4629      	mov	r1, r5
   d47de:	4630      	mov	r0, r6
   d47e0:	4798      	blx	r3
   d47e2:	e00f      	b.n	d4804 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d47e4:	b124      	cbz	r4, d47f0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d47e6:	212e      	movs	r1, #46	; 0x2e
   d47e8:	4630      	mov	r0, r6
   d47ea:	f7ff ff05 	bl	d45f8 <_ZN5Print5printEc>
   d47ee:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d47f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d47f4:	220a      	movs	r2, #10
   d47f6:	4630      	mov	r0, r6
   d47f8:	f7ff ff2e 	bl	d4658 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d47fc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d47fe:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4800:	d1f0      	bne.n	d47e4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4802:	4620      	mov	r0, r4
    }
    return n;
}
   d4804:	b00d      	add	sp, #52	; 0x34
   d4806:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4808 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4808:	b510      	push	{r4, lr}
   d480a:	4b05      	ldr	r3, [pc, #20]	; (d4820 <_ZN9IPAddressC1Ev+0x18>)
   d480c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d480e:	2211      	movs	r2, #17
   d4810:	f840 3b04 	str.w	r3, [r0], #4
   d4814:	2100      	movs	r1, #0
   d4816:	f000 fd1e 	bl	d5256 <memset>
{
    clear();
}
   d481a:	4620      	mov	r0, r4
   d481c:	bd10      	pop	{r4, pc}
   d481e:	bf00      	nop
   d4820:	000d5434 	.word	0x000d5434

000d4824 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4824:	4603      	mov	r3, r0
   d4826:	4a07      	ldr	r2, [pc, #28]	; (d4844 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4828:	b510      	push	{r4, lr}
   d482a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d482e:	f101 0210 	add.w	r2, r1, #16
   d4832:	f851 4b04 	ldr.w	r4, [r1], #4
   d4836:	f843 4b04 	str.w	r4, [r3], #4
   d483a:	4291      	cmp	r1, r2
   d483c:	d1f9      	bne.n	d4832 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d483e:	780a      	ldrb	r2, [r1, #0]
   d4840:	701a      	strb	r2, [r3, #0]
}
   d4842:	bd10      	pop	{r4, pc}
   d4844:	000d5434 	.word	0x000d5434

000d4848 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4848:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d484a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d484e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4852:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4856:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d485a:	2304      	movs	r3, #4
   d485c:	6041      	str	r1, [r0, #4]
   d485e:	7503      	strb	r3, [r0, #20]
   d4860:	bd10      	pop	{r4, pc}

000d4862 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4862:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4864:	780d      	ldrb	r5, [r1, #0]
   d4866:	788b      	ldrb	r3, [r1, #2]
   d4868:	784a      	ldrb	r2, [r1, #1]
   d486a:	78c9      	ldrb	r1, [r1, #3]
   d486c:	9100      	str	r1, [sp, #0]
   d486e:	4629      	mov	r1, r5
   d4870:	f7ff ffea 	bl	d4848 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4874:	b003      	add	sp, #12
   d4876:	bd30      	pop	{r4, r5, pc}

000d4878 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4878:	7441      	strb	r1, [r0, #17]
   d487a:	4770      	bx	lr

000d487c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d487c:	4770      	bx	lr

000d487e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d487e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4880:	2100      	movs	r1, #0
   d4882:	7c00      	ldrb	r0, [r0, #16]
   d4884:	f7ff fd7c 	bl	d4380 <HAL_USB_USART_Receive_Data>
}
   d4888:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d488c:	bf28      	it	cs
   d488e:	f04f 30ff 	movcs.w	r0, #4294967295
   d4892:	bd08      	pop	{r3, pc}

000d4894 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4894:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4896:	2101      	movs	r1, #1
   d4898:	7c00      	ldrb	r0, [r0, #16]
   d489a:	f7ff fd71 	bl	d4380 <HAL_USB_USART_Receive_Data>
}
   d489e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d48a2:	bf28      	it	cs
   d48a4:	f04f 30ff 	movcs.w	r0, #4294967295
   d48a8:	bd08      	pop	{r3, pc}

000d48aa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d48aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d48ac:	7c00      	ldrb	r0, [r0, #16]
   d48ae:	f7ff fd5f 	bl	d4370 <HAL_USB_USART_Available_Data_For_Write>
}
   d48b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d48b6:	bd08      	pop	{r3, pc}

000d48b8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d48b8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d48ba:	7c00      	ldrb	r0, [r0, #16]
   d48bc:	f7ff fd50 	bl	d4360 <HAL_USB_USART_Available_Data>
}
   d48c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d48c4:	bd08      	pop	{r3, pc}

000d48c6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d48c6:	7c00      	ldrb	r0, [r0, #16]
   d48c8:	f7ff bd6a 	b.w	d43a0 <HAL_USB_USART_Flush_Data>

000d48cc <_ZN9USBSerialD0Ev>:
   d48cc:	b510      	push	{r4, lr}
   d48ce:	2114      	movs	r1, #20
   d48d0:	4604      	mov	r4, r0
   d48d2:	f000 fb5c 	bl	d4f8e <_ZdlPvj>
   d48d6:	4620      	mov	r0, r4
   d48d8:	bd10      	pop	{r4, pc}

000d48da <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d48da:	b538      	push	{r3, r4, r5, lr}
   d48dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d48de:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d48e0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d48e2:	f7ff fd45 	bl	d4370 <HAL_USB_USART_Available_Data_For_Write>
   d48e6:	2800      	cmp	r0, #0
   d48e8:	dc01      	bgt.n	d48ee <_ZN9USBSerial5writeEh+0x14>
   d48ea:	7c60      	ldrb	r0, [r4, #17]
   d48ec:	b128      	cbz	r0, d48fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d48ee:	4629      	mov	r1, r5
   d48f0:	7c20      	ldrb	r0, [r4, #16]
   d48f2:	f7ff fd4d 	bl	d4390 <HAL_USB_USART_Send_Data>
   d48f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d48fa:	bd38      	pop	{r3, r4, r5, pc}

000d48fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d48fc:	b510      	push	{r4, lr}
   d48fe:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4900:	2300      	movs	r3, #0
   d4902:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4908:	60a3      	str	r3, [r4, #8]
   d490a:	4b05      	ldr	r3, [pc, #20]	; (d4920 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d490c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d490e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4910:	4608      	mov	r0, r1
{
  _serial = serial;
   d4912:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4914:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4916:	4611      	mov	r1, r2
   d4918:	f7ff fd1a 	bl	d4350 <HAL_USB_USART_Init>
}
   d491c:	4620      	mov	r0, r4
   d491e:	bd10      	pop	{r4, pc}
   d4920:	000d5448 	.word	0x000d5448

000d4924 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4924:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4926:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4928:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d492a:	2100      	movs	r1, #0
   d492c:	f000 fc93 	bl	d5256 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4930:	4620      	mov	r0, r4
   d4932:	bd10      	pop	{r4, pc}

000d4934 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4934:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4936:	4d0e      	ldr	r5, [pc, #56]	; (d4970 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4938:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d493a:	a801      	add	r0, sp, #4
   d493c:	f7ff fff2 	bl	d4924 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4940:	6829      	ldr	r1, [r5, #0]
   d4942:	f011 0401 	ands.w	r4, r1, #1
   d4946:	d110      	bne.n	d496a <_Z16_fetch_usbserialv+0x36>
   d4948:	4628      	mov	r0, r5
   d494a:	f7ff fbaa 	bl	d40a2 <__cxa_guard_acquire>
   d494e:	b160      	cbz	r0, d496a <_Z16_fetch_usbserialv+0x36>
   d4950:	aa01      	add	r2, sp, #4
   d4952:	4621      	mov	r1, r4
   d4954:	4807      	ldr	r0, [pc, #28]	; (d4974 <_Z16_fetch_usbserialv+0x40>)
   d4956:	f7ff ffd1 	bl	d48fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d495a:	4628      	mov	r0, r5
   d495c:	f7ff fba6 	bl	d40ac <__cxa_guard_release>
   d4960:	4a05      	ldr	r2, [pc, #20]	; (d4978 <_Z16_fetch_usbserialv+0x44>)
   d4962:	4906      	ldr	r1, [pc, #24]	; (d497c <_Z16_fetch_usbserialv+0x48>)
   d4964:	4803      	ldr	r0, [pc, #12]	; (d4974 <_Z16_fetch_usbserialv+0x40>)
   d4966:	f000 fb0d 	bl	d4f84 <__aeabi_atexit>
	return _usbserial;
}
   d496a:	4802      	ldr	r0, [pc, #8]	; (d4974 <_Z16_fetch_usbserialv+0x40>)
   d496c:	b007      	add	sp, #28
   d496e:	bd30      	pop	{r4, r5, pc}
   d4970:	2003e4f8 	.word	0x2003e4f8
   d4974:	2003e4fc 	.word	0x2003e4fc
   d4978:	2003e4c4 	.word	0x2003e4c4
   d497c:	000d487d 	.word	0x000d487d

000d4980 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4980:	4770      	bx	lr

000d4982 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4982:	7441      	strb	r1, [r0, #17]
   d4984:	4770      	bx	lr

000d4986 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4986:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4988:	7c00      	ldrb	r0, [r0, #16]
   d498a:	f7ff fca1 	bl	d42d0 <HAL_USART_Available_Data_For_Write>
}
   d498e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4992:	bd08      	pop	{r3, pc}

000d4994 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4994:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4996:	7c00      	ldrb	r0, [r0, #16]
   d4998:	f7ff fc72 	bl	d4280 <HAL_USART_Available_Data>
}
   d499c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49a0:	bd08      	pop	{r3, pc}

000d49a2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d49a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d49a4:	7c00      	ldrb	r0, [r0, #16]
   d49a6:	f7ff fc7b 	bl	d42a0 <HAL_USART_Peek_Data>
}
   d49aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d49ae:	bf28      	it	cs
   d49b0:	f04f 30ff 	movcs.w	r0, #4294967295
   d49b4:	bd08      	pop	{r3, pc}

000d49b6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d49b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d49b8:	7c00      	ldrb	r0, [r0, #16]
   d49ba:	f7ff fc69 	bl	d4290 <HAL_USART_Read_Data>
}
   d49be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d49c2:	bf28      	it	cs
   d49c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d49c8:	bd08      	pop	{r3, pc}

000d49ca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d49ca:	7c00      	ldrb	r0, [r0, #16]
   d49cc:	f7ff bc70 	b.w	d42b0 <HAL_USART_Flush_Data>

000d49d0 <_ZN11USARTSerialD0Ev>:
   d49d0:	b510      	push	{r4, lr}
   d49d2:	2114      	movs	r1, #20
   d49d4:	4604      	mov	r4, r0
   d49d6:	f000 fada 	bl	d4f8e <_ZdlPvj>
   d49da:	4620      	mov	r0, r4
   d49dc:	bd10      	pop	{r4, pc}

000d49de <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d49de:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d49e0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d49e2:	4604      	mov	r4, r0
   d49e4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d49e6:	b925      	cbnz	r5, d49f2 <_ZN11USARTSerial5writeEh+0x14>
   d49e8:	7c00      	ldrb	r0, [r0, #16]
   d49ea:	f7ff fc71 	bl	d42d0 <HAL_USART_Available_Data_For_Write>
   d49ee:	2800      	cmp	r0, #0
   d49f0:	dd05      	ble.n	d49fe <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d49f2:	4631      	mov	r1, r6
   d49f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d49f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d49fa:	f7ff bc39 	b.w	d4270 <HAL_USART_Write_Data>
  }
  return 0;
}
   d49fe:	4628      	mov	r0, r5
   d4a00:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4a04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4a04:	b510      	push	{r4, lr}
   d4a06:	4604      	mov	r4, r0
   d4a08:	4608      	mov	r0, r1
   d4a0a:	4611      	mov	r1, r2
   d4a0c:	2200      	movs	r2, #0
   d4a0e:	6062      	str	r2, [r4, #4]
   d4a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4a14:	60a2      	str	r2, [r4, #8]
   d4a16:	4a05      	ldr	r2, [pc, #20]	; (d4a2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4a18:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4a1a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4a1c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4a1e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4a20:	461a      	mov	r2, r3
   d4a22:	f7ff fc1d 	bl	d4260 <HAL_USART_Init>
}
   d4a26:	4620      	mov	r0, r4
   d4a28:	bd10      	pop	{r4, pc}
   d4a2a:	bf00      	nop
   d4a2c:	000d5478 	.word	0x000d5478

000d4a30 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4a30:	7c00      	ldrb	r0, [r0, #16]
   d4a32:	f7ff bc45 	b.w	d42c0 <HAL_USART_Is_Enabled>
	...

000d4a38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d4a3a:	4c19      	ldr	r4, [pc, #100]	; (d4aa0 <_Z22__fetch_global_Serial1v+0x68>)
   d4a3c:	6825      	ldr	r5, [r4, #0]
   d4a3e:	b94d      	cbnz	r5, d4a54 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d4a40:	2084      	movs	r0, #132	; 0x84
   d4a42:	f7ff fb28 	bl	d4096 <_Znwj>
   d4a46:	4606      	mov	r6, r0
   d4a48:	b118      	cbz	r0, d4a52 <_Z22__fetch_global_Serial1v+0x1a>
   d4a4a:	2284      	movs	r2, #132	; 0x84
   d4a4c:	4629      	mov	r1, r5
   d4a4e:	f000 fc02 	bl	d5256 <memset>
   d4a52:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d4a54:	4d13      	ldr	r5, [pc, #76]	; (d4aa4 <_Z22__fetch_global_Serial1v+0x6c>)
   d4a56:	682e      	ldr	r6, [r5, #0]
   d4a58:	b94e      	cbnz	r6, d4a6e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d4a5a:	2084      	movs	r0, #132	; 0x84
   d4a5c:	f7ff fb1b 	bl	d4096 <_Znwj>
   d4a60:	4607      	mov	r7, r0
   d4a62:	b118      	cbz	r0, d4a6c <_Z22__fetch_global_Serial1v+0x34>
   d4a64:	2284      	movs	r2, #132	; 0x84
   d4a66:	4631      	mov	r1, r6
   d4a68:	f000 fbf5 	bl	d5256 <memset>
   d4a6c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d4a6e:	4f0e      	ldr	r7, [pc, #56]	; (d4aa8 <_Z22__fetch_global_Serial1v+0x70>)
   d4a70:	6839      	ldr	r1, [r7, #0]
   d4a72:	f011 0601 	ands.w	r6, r1, #1
   d4a76:	d111      	bne.n	d4a9c <_Z22__fetch_global_Serial1v+0x64>
   d4a78:	4638      	mov	r0, r7
   d4a7a:	f7ff fb12 	bl	d40a2 <__cxa_guard_acquire>
   d4a7e:	b168      	cbz	r0, d4a9c <_Z22__fetch_global_Serial1v+0x64>
   d4a80:	6822      	ldr	r2, [r4, #0]
   d4a82:	682b      	ldr	r3, [r5, #0]
   d4a84:	4809      	ldr	r0, [pc, #36]	; (d4aac <_Z22__fetch_global_Serial1v+0x74>)
   d4a86:	4631      	mov	r1, r6
   d4a88:	f7ff ffbc 	bl	d4a04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4a8c:	4638      	mov	r0, r7
   d4a8e:	f7ff fb0d 	bl	d40ac <__cxa_guard_release>
   d4a92:	4a07      	ldr	r2, [pc, #28]	; (d4ab0 <_Z22__fetch_global_Serial1v+0x78>)
   d4a94:	4907      	ldr	r1, [pc, #28]	; (d4ab4 <_Z22__fetch_global_Serial1v+0x7c>)
   d4a96:	4805      	ldr	r0, [pc, #20]	; (d4aac <_Z22__fetch_global_Serial1v+0x74>)
   d4a98:	f000 fa74 	bl	d4f84 <__aeabi_atexit>
#endif
	return serial1;
}
   d4a9c:	4803      	ldr	r0, [pc, #12]	; (d4aac <_Z22__fetch_global_Serial1v+0x74>)
   d4a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4aa0:	2003e52c 	.word	0x2003e52c
   d4aa4:	2003e524 	.word	0x2003e524
   d4aa8:	2003e528 	.word	0x2003e528
   d4aac:	2003e510 	.word	0x2003e510
   d4ab0:	2003e4c4 	.word	0x2003e4c4
   d4ab4:	000d4981 	.word	0x000d4981

000d4ab8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4ab8:	4770      	bx	lr

000d4aba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4abc:	4606      	mov	r6, r0
   d4abe:	4615      	mov	r5, r2
   d4ac0:	460c      	mov	r4, r1
   d4ac2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ac4:	42bc      	cmp	r4, r7
   d4ac6:	d006      	beq.n	d4ad6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4ac8:	6833      	ldr	r3, [r6, #0]
   d4aca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4ace:	689b      	ldr	r3, [r3, #8]
   d4ad0:	4630      	mov	r0, r6
   d4ad2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ad4:	e7f6      	b.n	d4ac4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4ad6:	4628      	mov	r0, r5
   d4ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ada <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4ada:	2200      	movs	r2, #0
   d4adc:	7c00      	ldrb	r0, [r0, #16]
   d4ade:	f7ff bbff 	b.w	d42e0 <HAL_I2C_Write_Data>

000d4ae2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4ae2:	2100      	movs	r1, #0
   d4ae4:	7c00      	ldrb	r0, [r0, #16]
   d4ae6:	f7ff bc03 	b.w	d42f0 <HAL_I2C_Available_Data>

000d4aea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4aea:	2100      	movs	r1, #0
   d4aec:	7c00      	ldrb	r0, [r0, #16]
   d4aee:	f7ff bc07 	b.w	d4300 <HAL_I2C_Read_Data>

000d4af2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4af2:	2100      	movs	r1, #0
   d4af4:	7c00      	ldrb	r0, [r0, #16]
   d4af6:	f7ff bc0b 	b.w	d4310 <HAL_I2C_Peek_Data>

000d4afa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4afa:	2100      	movs	r1, #0
   d4afc:	7c00      	ldrb	r0, [r0, #16]
   d4afe:	f7ff bc0f 	b.w	d4320 <HAL_I2C_Flush_Data>

000d4b02 <_ZN7TwoWireD0Ev>:
   d4b02:	b510      	push	{r4, lr}
   d4b04:	2114      	movs	r1, #20
   d4b06:	4604      	mov	r4, r0
   d4b08:	f000 fa41 	bl	d4f8e <_ZdlPvj>
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	bd10      	pop	{r4, pc}

000d4b10 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4b10:	b510      	push	{r4, lr}
   d4b12:	4604      	mov	r4, r0
   d4b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b18:	4608      	mov	r0, r1
   d4b1a:	60a3      	str	r3, [r4, #8]
   d4b1c:	2100      	movs	r1, #0
   d4b1e:	4b04      	ldr	r3, [pc, #16]	; (d4b30 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4b20:	7420      	strb	r0, [r4, #16]
   d4b22:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4b24:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4b26:	f7ff fc0b 	bl	d4340 <HAL_I2C_Init>

}
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	bd10      	pop	{r4, pc}
   d4b2e:	bf00      	nop
   d4b30:	000d54a8 	.word	0x000d54a8

000d4b34 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4b34:	2100      	movs	r1, #0
   d4b36:	7c00      	ldrb	r0, [r0, #16]
   d4b38:	f7ff bbfa 	b.w	d4330 <HAL_I2C_Is_Enabled>

000d4b3c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b3c:	2200      	movs	r2, #0
   d4b3e:	4611      	mov	r1, r2
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	f7ff bc91 	b.w	d4468 <network_listening>

000d4b46 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b46:	2200      	movs	r2, #0
   d4b48:	4611      	mov	r1, r2
   d4b4a:	6840      	ldr	r0, [r0, #4]
   d4b4c:	f7ff bc9c 	b.w	d4488 <network_get_listen_timeout>

000d4b50 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b50:	2200      	movs	r2, #0
   d4b52:	6840      	ldr	r0, [r0, #4]
   d4b54:	f7ff bc90 	b.w	d4478 <network_set_listen_timeout>

000d4b58 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b58:	2200      	movs	r2, #0
   d4b5a:	f081 0101 	eor.w	r1, r1, #1
   d4b5e:	6840      	ldr	r0, [r0, #4]
   d4b60:	f7ff bc7a 	b.w	d4458 <network_listen>

000d4b64 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4b64:	2300      	movs	r3, #0
   d4b66:	461a      	mov	r2, r3
   d4b68:	2101      	movs	r1, #1
   d4b6a:	6840      	ldr	r0, [r0, #4]
   d4b6c:	f7ff bc6c 	b.w	d4448 <network_off>

000d4b70 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b70:	2300      	movs	r3, #0
   d4b72:	461a      	mov	r2, r3
   d4b74:	4619      	mov	r1, r3
   d4b76:	6840      	ldr	r0, [r0, #4]
   d4b78:	f7ff bc5e 	b.w	d4438 <network_on>

000d4b7c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b7c:	2200      	movs	r2, #0
   d4b7e:	4611      	mov	r1, r2
   d4b80:	6840      	ldr	r0, [r0, #4]
   d4b82:	f7ff bc51 	b.w	d4428 <network_ready>

000d4b86 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b86:	2200      	movs	r2, #0
   d4b88:	4611      	mov	r1, r2
   d4b8a:	6840      	ldr	r0, [r0, #4]
   d4b8c:	f7ff bc3c 	b.w	d4408 <network_connecting>

000d4b90 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b90:	2200      	movs	r2, #0
   d4b92:	2102      	movs	r1, #2
   d4b94:	6840      	ldr	r0, [r0, #4]
   d4b96:	f7ff bc3f 	b.w	d4418 <network_disconnect>

000d4b9a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b9a:	2300      	movs	r3, #0
   d4b9c:	461a      	mov	r2, r3
   d4b9e:	6840      	ldr	r0, [r0, #4]
   d4ba0:	f7ff bc2a 	b.w	d43f8 <network_connect>

000d4ba4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4ba4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ba6:	4605      	mov	r5, r0
   d4ba8:	b188      	cbz	r0, d4bce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4baa:	6804      	ldr	r4, [r0, #0]
   d4bac:	b14c      	cbz	r4, d4bc2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4bae:	68a3      	ldr	r3, [r4, #8]
   d4bb0:	b11b      	cbz	r3, d4bba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4bb2:	2203      	movs	r2, #3
   d4bb4:	4621      	mov	r1, r4
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bba:	2110      	movs	r1, #16
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	f000 f9e6 	bl	d4f8e <_ZdlPvj>
   d4bc2:	4628      	mov	r0, r5
   d4bc4:	2114      	movs	r1, #20
      }
   d4bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bca:	f000 b9e0 	b.w	d4f8e <_ZdlPvj>
   d4bce:	bd38      	pop	{r3, r4, r5, pc}

000d4bd0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4bd0:	b110      	cbz	r0, d4bd8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4bd2:	6803      	ldr	r3, [r0, #0]
   d4bd4:	685b      	ldr	r3, [r3, #4]
   d4bd6:	4718      	bx	r3
   d4bd8:	4770      	bx	lr

000d4bda <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4bda:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4bdc:	6803      	ldr	r3, [r0, #0]
   d4bde:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4be0:	b1bb      	cbz	r3, d4c12 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4be2:	6858      	ldr	r0, [r3, #4]
   d4be4:	f7ff fb0c 	bl	d4200 <os_thread_is_current>
   d4be8:	b978      	cbnz	r0, d4c0a <_ZN6ThreadD1Ev+0x30>
   d4bea:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4bec:	7c5a      	ldrb	r2, [r3, #17]
   d4bee:	b912      	cbnz	r2, d4bf6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4bf0:	6858      	ldr	r0, [r3, #4]
   d4bf2:	f7ff fb0d 	bl	d4210 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4bf6:	6823      	ldr	r3, [r4, #0]
   d4bf8:	6858      	ldr	r0, [r3, #4]
   d4bfa:	f7ff fb11 	bl	d4220 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bfe:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4c00:	2300      	movs	r3, #0
   d4c02:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c04:	b128      	cbz	r0, d4c12 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4c06:	f7ff ffcd 	bl	d4ba4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c0a:	6820      	ldr	r0, [r4, #0]
   d4c0c:	b108      	cbz	r0, d4c12 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4c0e:	f7ff ffc9 	bl	d4ba4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4c12:	4620      	mov	r0, r4
   d4c14:	bd10      	pop	{r4, pc}
	...

000d4c18 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4c18:	b538      	push	{r3, r4, r5, lr}
   d4c1a:	4b0c      	ldr	r3, [pc, #48]	; (d4c4c <_ZN5spark9MeshClassD1Ev+0x34>)
   d4c1c:	6003      	str	r3, [r0, #0]
   d4c1e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c20:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4c24:	b108      	cbz	r0, d4c2a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4c26:	f7ff fa3a 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c2a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4c2e:	b135      	cbz	r5, d4c3e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c30:	4628      	mov	r0, r5
   d4c32:	f7ff ffd2 	bl	d4bda <_ZN6ThreadD1Ev>
   d4c36:	2104      	movs	r1, #4
   d4c38:	4628      	mov	r0, r5
   d4c3a:	f000 f9a8 	bl	d4f8e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c3e:	68a0      	ldr	r0, [r4, #8]
   d4c40:	b108      	cbz	r0, d4c46 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4c42:	f7ff ffc5 	bl	d4bd0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4c46:	4620      	mov	r0, r4
   d4c48:	bd38      	pop	{r3, r4, r5, pc}
   d4c4a:	bf00      	nop
   d4c4c:	000d54d0 	.word	0x000d54d0

000d4c50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4c50:	b538      	push	{r3, r4, r5, lr}
   d4c52:	4c0e      	ldr	r4, [pc, #56]	; (d4c8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4c54:	4b0e      	ldr	r3, [pc, #56]	; (d4c90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4c56:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c58:	2500      	movs	r5, #0
   d4c5a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4c5c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4c60:	6063      	str	r3, [r4, #4]
   d4c62:	60a5      	str	r5, [r4, #8]
   d4c64:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c68:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4c6c:	f7ff fae8 	bl	d4240 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4c70:	4b08      	ldr	r3, [pc, #32]	; (d4c94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4c72:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c76:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4c7a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	4a06      	ldr	r2, [pc, #24]	; (d4c98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4c80:	4906      	ldr	r1, [pc, #24]	; (d4c9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4c86:	f000 b97d 	b.w	d4f84 <__aeabi_atexit>
   d4c8a:	bf00      	nop
   d4c8c:	2003e530 	.word	0x2003e530
   d4c90:	000d5538 	.word	0x000d5538
   d4c94:	000d54d0 	.word	0x000d54d0
   d4c98:	2003e4c4 	.word	0x2003e4c4
   d4c9c:	000d4c19 	.word	0x000d4c19

000d4ca0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	4611      	mov	r1, r2
   d4ca4:	6840      	ldr	r0, [r0, #4]
   d4ca6:	f7ff bbbf 	b.w	d4428 <network_ready>

000d4caa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4caa:	2200      	movs	r2, #0
   d4cac:	4611      	mov	r1, r2
   d4cae:	6840      	ldr	r0, [r0, #4]
   d4cb0:	f7ff bbda 	b.w	d4468 <network_listening>

000d4cb4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4cb4:	2200      	movs	r2, #0
   d4cb6:	4611      	mov	r1, r2
   d4cb8:	6840      	ldr	r0, [r0, #4]
   d4cba:	f7ff bbe5 	b.w	d4488 <network_get_listen_timeout>

000d4cbe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4cbe:	2200      	movs	r2, #0
   d4cc0:	6840      	ldr	r0, [r0, #4]
   d4cc2:	f7ff bbd9 	b.w	d4478 <network_set_listen_timeout>

000d4cc6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cc6:	2200      	movs	r2, #0
   d4cc8:	f081 0101 	eor.w	r1, r1, #1
   d4ccc:	6840      	ldr	r0, [r0, #4]
   d4cce:	f7ff bbc3 	b.w	d4458 <network_listen>

000d4cd2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4cd2:	2300      	movs	r3, #0
   d4cd4:	461a      	mov	r2, r3
   d4cd6:	4619      	mov	r1, r3
   d4cd8:	6840      	ldr	r0, [r0, #4]
   d4cda:	f7ff bbb5 	b.w	d4448 <network_off>

000d4cde <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4cde:	2300      	movs	r3, #0
   d4ce0:	461a      	mov	r2, r3
   d4ce2:	4619      	mov	r1, r3
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	f7ff bba7 	b.w	d4438 <network_on>

000d4cea <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cea:	2200      	movs	r2, #0
   d4cec:	4611      	mov	r1, r2
   d4cee:	6840      	ldr	r0, [r0, #4]
   d4cf0:	f7ff bb8a 	b.w	d4408 <network_connecting>

000d4cf4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cf4:	2200      	movs	r2, #0
   d4cf6:	2102      	movs	r1, #2
   d4cf8:	6840      	ldr	r0, [r0, #4]
   d4cfa:	f7ff bb8d 	b.w	d4418 <network_disconnect>

000d4cfe <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cfe:	2300      	movs	r3, #0
   d4d00:	461a      	mov	r2, r3
   d4d02:	6840      	ldr	r0, [r0, #4]
   d4d04:	f7ff bb78 	b.w	d43f8 <network_connect>

000d4d08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4d08:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4d0a:	2204      	movs	r2, #4
   d4d0c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4d0e:	4a02      	ldr	r2, [pc, #8]	; (d4d18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4d10:	601a      	str	r2, [r3, #0]
   d4d12:	4770      	bx	lr
   d4d14:	2003e704 	.word	0x2003e704
   d4d18:	000d5504 	.word	0x000d5504

000d4d1c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4d1c:	2300      	movs	r3, #0
   d4d1e:	461a      	mov	r2, r3
   d4d20:	6840      	ldr	r0, [r0, #4]
   d4d22:	f7ff bb69 	b.w	d43f8 <network_connect>

000d4d26 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d26:	2200      	movs	r2, #0
   d4d28:	2102      	movs	r1, #2
   d4d2a:	6840      	ldr	r0, [r0, #4]
   d4d2c:	f7ff bb74 	b.w	d4418 <network_disconnect>

000d4d30 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d30:	2200      	movs	r2, #0
   d4d32:	4611      	mov	r1, r2
   d4d34:	6840      	ldr	r0, [r0, #4]
   d4d36:	f7ff bb67 	b.w	d4408 <network_connecting>

000d4d3a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4d3a:	2200      	movs	r2, #0
   d4d3c:	4611      	mov	r1, r2
   d4d3e:	6840      	ldr	r0, [r0, #4]
   d4d40:	f7ff bb72 	b.w	d4428 <network_ready>

000d4d44 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d44:	2300      	movs	r3, #0
   d4d46:	461a      	mov	r2, r3
   d4d48:	4619      	mov	r1, r3
   d4d4a:	6840      	ldr	r0, [r0, #4]
   d4d4c:	f7ff bb74 	b.w	d4438 <network_on>

000d4d50 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4d50:	2300      	movs	r3, #0
   d4d52:	461a      	mov	r2, r3
   d4d54:	4619      	mov	r1, r3
   d4d56:	6840      	ldr	r0, [r0, #4]
   d4d58:	f7ff bb76 	b.w	d4448 <network_off>

000d4d5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d5c:	2200      	movs	r2, #0
   d4d5e:	f081 0101 	eor.w	r1, r1, #1
   d4d62:	6840      	ldr	r0, [r0, #4]
   d4d64:	f7ff bb78 	b.w	d4458 <network_listen>

000d4d68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d68:	2200      	movs	r2, #0
   d4d6a:	6840      	ldr	r0, [r0, #4]
   d4d6c:	f7ff bb84 	b.w	d4478 <network_set_listen_timeout>

000d4d70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d70:	2200      	movs	r2, #0
   d4d72:	4611      	mov	r1, r2
   d4d74:	6840      	ldr	r0, [r0, #4]
   d4d76:	f7ff bb87 	b.w	d4488 <network_get_listen_timeout>

000d4d7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d7a:	2200      	movs	r2, #0
   d4d7c:	4611      	mov	r1, r2
   d4d7e:	6840      	ldr	r0, [r0, #4]
   d4d80:	f7ff bb72 	b.w	d4468 <network_listening>

000d4d84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d88:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d8a:	b095      	sub	sp, #84	; 0x54
   d4d8c:	4616      	mov	r6, r2
   d4d8e:	460d      	mov	r5, r1
   d4d90:	4607      	mov	r7, r0
    IPAddress addr;
   d4d92:	f7ff fd39 	bl	d4808 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4d96:	4621      	mov	r1, r4
   d4d98:	2220      	movs	r2, #32
   d4d9a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d9c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d9e:	f000 fa5a 	bl	d5256 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4da2:	2340      	movs	r3, #64	; 0x40
   d4da4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4da6:	4621      	mov	r1, r4
   d4da8:	466b      	mov	r3, sp
   d4daa:	aa0c      	add	r2, sp, #48	; 0x30
   d4dac:	4630      	mov	r0, r6
   d4dae:	f7ff f9df 	bl	d4170 <netdb_getaddrinfo>
    if (!r) {
   d4db2:	4604      	mov	r4, r0
   d4db4:	2800      	cmp	r0, #0
   d4db6:	d144      	bne.n	d4e42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4db8:	4602      	mov	r2, r0
   d4dba:	2101      	movs	r1, #1
   d4dbc:	6868      	ldr	r0, [r5, #4]
   d4dbe:	f7ff fb33 	bl	d4428 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4dc2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4dc4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4dc6:	4622      	mov	r2, r4
   d4dc8:	6868      	ldr	r0, [r5, #4]
   d4dca:	f7ff fb2d 	bl	d4428 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dce:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4dd0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4dd2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dd4:	2e00      	cmp	r6, #0
   d4dd6:	d034      	beq.n	d4e42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4dd8:	2900      	cmp	r1, #0
   d4dda:	d132      	bne.n	d4e42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4ddc:	6873      	ldr	r3, [r6, #4]
   d4dde:	2b02      	cmp	r3, #2
   d4de0:	d002      	beq.n	d4de8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4de2:	2b0a      	cmp	r3, #10
   d4de4:	d009      	beq.n	d4dfa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4de6:	e02a      	b.n	d4e3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4de8:	f1b8 0f00 	cmp.w	r8, #0
   d4dec:	d027      	beq.n	d4e3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4dee:	6971      	ldr	r1, [r6, #20]
   d4df0:	4638      	mov	r0, r7
   d4df2:	3104      	adds	r1, #4
   d4df4:	f7ff fd35 	bl	d4862 <_ZN9IPAddressaSEPKh>
   d4df8:	e020      	b.n	d4e3c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4dfa:	f1b9 0f00 	cmp.w	r9, #0
   d4dfe:	d01e      	beq.n	d4e3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4e00:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4e02:	2211      	movs	r2, #17
   d4e04:	a801      	add	r0, sp, #4
   d4e06:	f000 fa26 	bl	d5256 <memset>
                    a.v = 6;
   d4e0a:	2306      	movs	r3, #6
   d4e0c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e10:	ad01      	add	r5, sp, #4
   d4e12:	f104 0308 	add.w	r3, r4, #8
   d4e16:	3418      	adds	r4, #24
   d4e18:	6818      	ldr	r0, [r3, #0]
   d4e1a:	6859      	ldr	r1, [r3, #4]
   d4e1c:	462a      	mov	r2, r5
   d4e1e:	c203      	stmia	r2!, {r0, r1}
   d4e20:	3308      	adds	r3, #8
   d4e22:	42a3      	cmp	r3, r4
   d4e24:	4615      	mov	r5, r2
   d4e26:	d1f7      	bne.n	d4e18 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4e28:	a901      	add	r1, sp, #4
   d4e2a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e2c:	ad07      	add	r5, sp, #28
   d4e2e:	f7ff fcf9 	bl	d4824 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e34:	1d3c      	adds	r4, r7, #4
   d4e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e38:	682b      	ldr	r3, [r5, #0]
   d4e3a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4e3c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e3e:	69f6      	ldr	r6, [r6, #28]
   d4e40:	e7c8      	b.n	d4dd4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e42:	9800      	ldr	r0, [sp, #0]
   d4e44:	f7ff f98c 	bl	d4160 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e48:	4638      	mov	r0, r7
   d4e4a:	b015      	add	sp, #84	; 0x54
   d4e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4e50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e50:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e52:	4a03      	ldr	r2, [pc, #12]	; (d4e60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e54:	601a      	str	r2, [r3, #0]
   d4e56:	2200      	movs	r2, #0
   d4e58:	605a      	str	r2, [r3, #4]
   d4e5a:	4770      	bx	lr
   d4e5c:	2003e70c 	.word	0x2003e70c
   d4e60:	000d5538 	.word	0x000d5538

000d4e64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d4e64:	b510      	push	{r4, lr}
   d4e66:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d4e68:	480f      	ldr	r0, [pc, #60]	; (d4ea8 <pinAvailable+0x44>)
   d4e6a:	f7ff fb87 	bl	d457c <_ZN8SPIClass9isEnabledEv>
   d4e6e:	b128      	cbz	r0, d4e7c <pinAvailable+0x18>
   d4e70:	f1a4 030b 	sub.w	r3, r4, #11
   d4e74:	2b02      	cmp	r3, #2
   d4e76:	d801      	bhi.n	d4e7c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d4e78:	2000      	movs	r0, #0
   d4e7a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d4e7c:	f000 f862 	bl	d4f44 <_Z19__fetch_global_Wirev>
   d4e80:	f7ff fe58 	bl	d4b34 <_ZN7TwoWire9isEnabledEv>
   d4e84:	b108      	cbz	r0, d4e8a <pinAvailable+0x26>
   d4e86:	2c01      	cmp	r4, #1
   d4e88:	d9f6      	bls.n	d4e78 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d4e8a:	f7ff fdd5 	bl	d4a38 <_Z22__fetch_global_Serial1v>
   d4e8e:	f7ff fdcf 	bl	d4a30 <_ZN11USARTSerial9isEnabledEv>
   d4e92:	b118      	cbz	r0, d4e9c <pinAvailable+0x38>
   d4e94:	f1a4 0309 	sub.w	r3, r4, #9
   d4e98:	2b01      	cmp	r3, #1
   d4e9a:	d9ed      	bls.n	d4e78 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d4e9c:	2c23      	cmp	r4, #35	; 0x23
   d4e9e:	bf8c      	ite	hi
   d4ea0:	2000      	movhi	r0, #0
   d4ea2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d4ea4:	bd10      	pop	{r4, pc}
   d4ea6:	bf00      	nop
   d4ea8:	2003e714 	.word	0x2003e714

000d4eac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4eac:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d4eae:	b538      	push	{r3, r4, r5, lr}
   d4eb0:	4604      	mov	r4, r0
   d4eb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4eb4:	d80a      	bhi.n	d4ecc <pinMode+0x20>
   d4eb6:	29ff      	cmp	r1, #255	; 0xff
   d4eb8:	d008      	beq.n	d4ecc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d4eba:	f7ff ffd3 	bl	d4e64 <pinAvailable>
   d4ebe:	b128      	cbz	r0, d4ecc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d4ec0:	4629      	mov	r1, r5
   d4ec2:	4620      	mov	r0, r4
}
   d4ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d4ec8:	f7ff b962 	b.w	d4190 <HAL_Pin_Mode>
   d4ecc:	bd38      	pop	{r3, r4, r5, pc}

000d4ece <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d4ece:	b538      	push	{r3, r4, r5, lr}
   d4ed0:	4604      	mov	r4, r0
   d4ed2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4ed4:	f7ff f964 	bl	d41a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d4ed8:	28ff      	cmp	r0, #255	; 0xff
   d4eda:	d010      	beq.n	d4efe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d4edc:	2806      	cmp	r0, #6
   d4ede:	d804      	bhi.n	d4eea <digitalWrite+0x1c>
   d4ee0:	234d      	movs	r3, #77	; 0x4d
   d4ee2:	fa23 f000 	lsr.w	r0, r3, r0
   d4ee6:	07c3      	lsls	r3, r0, #31
   d4ee8:	d409      	bmi.n	d4efe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d4eea:	4620      	mov	r0, r4
   d4eec:	f7ff ffba 	bl	d4e64 <pinAvailable>
   d4ef0:	b128      	cbz	r0, d4efe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d4ef2:	4629      	mov	r1, r5
   d4ef4:	4620      	mov	r0, r4
}
   d4ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d4efa:	f7ff b959 	b.w	d41b0 <HAL_GPIO_Write>
   d4efe:	bd38      	pop	{r3, r4, r5, pc}

000d4f00 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4f00:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4f02:	4c0c      	ldr	r4, [pc, #48]	; (d4f34 <_GLOBAL__sub_I_SPI+0x34>)
   d4f04:	4e0c      	ldr	r6, [pc, #48]	; (d4f38 <_GLOBAL__sub_I_SPI+0x38>)
   d4f06:	4d0d      	ldr	r5, [pc, #52]	; (d4f3c <_GLOBAL__sub_I_SPI+0x3c>)
   d4f08:	2100      	movs	r1, #0
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	f7ff fb22 	bl	d4554 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4f10:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4f12:	4c0b      	ldr	r4, [pc, #44]	; (d4f40 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4f14:	4632      	mov	r2, r6
   d4f16:	4629      	mov	r1, r5
   d4f18:	f000 f834 	bl	d4f84 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4f1c:	2101      	movs	r1, #1
   d4f1e:	4620      	mov	r0, r4
   d4f20:	f7ff fb18 	bl	d4554 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4f24:	4632      	mov	r2, r6
   d4f26:	4629      	mov	r1, r5
   d4f28:	4620      	mov	r0, r4
   d4f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4f2e:	f000 b829 	b.w	d4f84 <__aeabi_atexit>
   d4f32:	bf00      	nop
   d4f34:	2003e714 	.word	0x2003e714
   d4f38:	2003e4c4 	.word	0x2003e4c4
   d4f3c:	000d4545 	.word	0x000d4545
   d4f40:	2003e724 	.word	0x2003e724

000d4f44 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d4f44:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d4f46:	4d0b      	ldr	r5, [pc, #44]	; (d4f74 <_Z19__fetch_global_Wirev+0x30>)
   d4f48:	6829      	ldr	r1, [r5, #0]
   d4f4a:	f011 0401 	ands.w	r4, r1, #1
   d4f4e:	d10f      	bne.n	d4f70 <_Z19__fetch_global_Wirev+0x2c>
   d4f50:	4628      	mov	r0, r5
   d4f52:	f7ff f8a6 	bl	d40a2 <__cxa_guard_acquire>
   d4f56:	b158      	cbz	r0, d4f70 <_Z19__fetch_global_Wirev+0x2c>
   d4f58:	4621      	mov	r1, r4
   d4f5a:	4807      	ldr	r0, [pc, #28]	; (d4f78 <_Z19__fetch_global_Wirev+0x34>)
   d4f5c:	f7ff fdd8 	bl	d4b10 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d4f60:	4628      	mov	r0, r5
   d4f62:	f7ff f8a3 	bl	d40ac <__cxa_guard_release>
   d4f66:	4a05      	ldr	r2, [pc, #20]	; (d4f7c <_Z19__fetch_global_Wirev+0x38>)
   d4f68:	4905      	ldr	r1, [pc, #20]	; (d4f80 <_Z19__fetch_global_Wirev+0x3c>)
   d4f6a:	4803      	ldr	r0, [pc, #12]	; (d4f78 <_Z19__fetch_global_Wirev+0x34>)
   d4f6c:	f000 f80a 	bl	d4f84 <__aeabi_atexit>
	return wire;
}
   d4f70:	4801      	ldr	r0, [pc, #4]	; (d4f78 <_Z19__fetch_global_Wirev+0x34>)
   d4f72:	bd38      	pop	{r3, r4, r5, pc}
   d4f74:	2003e738 	.word	0x2003e738
   d4f78:	2003e73c 	.word	0x2003e73c
   d4f7c:	2003e4c4 	.word	0x2003e4c4
   d4f80:	000d4ab9 	.word	0x000d4ab9

000d4f84 <__aeabi_atexit>:
   d4f84:	460b      	mov	r3, r1
   d4f86:	4601      	mov	r1, r0
   d4f88:	4618      	mov	r0, r3
   d4f8a:	f000 b94b 	b.w	d5224 <__cxa_atexit>

000d4f8e <_ZdlPvj>:
   d4f8e:	f7ff b884 	b.w	d409a <_ZdlPv>
	...

000d4f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4f94:	4b18      	ldr	r3, [pc, #96]	; (d4ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4f96:	681a      	ldr	r2, [r3, #0]
   d4f98:	07d1      	lsls	r1, r2, #31
   d4f9a:	bf5c      	itt	pl
   d4f9c:	2201      	movpl	r2, #1
   d4f9e:	601a      	strpl	r2, [r3, #0]
   d4fa0:	4b16      	ldr	r3, [pc, #88]	; (d4ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4fa2:	681a      	ldr	r2, [r3, #0]
   d4fa4:	07d2      	lsls	r2, r2, #31
   d4fa6:	bf5c      	itt	pl
   d4fa8:	2201      	movpl	r2, #1
   d4faa:	601a      	strpl	r2, [r3, #0]
   d4fac:	4b14      	ldr	r3, [pc, #80]	; (d5000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4fae:	681a      	ldr	r2, [r3, #0]
   d4fb0:	07d0      	lsls	r0, r2, #31
   d4fb2:	bf5c      	itt	pl
   d4fb4:	2201      	movpl	r2, #1
   d4fb6:	601a      	strpl	r2, [r3, #0]
   d4fb8:	4b12      	ldr	r3, [pc, #72]	; (d5004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4fba:	681a      	ldr	r2, [r3, #0]
   d4fbc:	07d1      	lsls	r1, r2, #31
   d4fbe:	bf5c      	itt	pl
   d4fc0:	2201      	movpl	r2, #1
   d4fc2:	601a      	strpl	r2, [r3, #0]
   d4fc4:	4b10      	ldr	r3, [pc, #64]	; (d5008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4fc6:	681a      	ldr	r2, [r3, #0]
   d4fc8:	07d2      	lsls	r2, r2, #31
   d4fca:	bf5c      	itt	pl
   d4fcc:	2201      	movpl	r2, #1
   d4fce:	601a      	strpl	r2, [r3, #0]
   d4fd0:	4b0e      	ldr	r3, [pc, #56]	; (d500c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4fd2:	681a      	ldr	r2, [r3, #0]
   d4fd4:	07d0      	lsls	r0, r2, #31
   d4fd6:	bf5c      	itt	pl
   d4fd8:	2201      	movpl	r2, #1
   d4fda:	601a      	strpl	r2, [r3, #0]
   d4fdc:	4b0c      	ldr	r3, [pc, #48]	; (d5010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4fde:	681a      	ldr	r2, [r3, #0]
   d4fe0:	07d1      	lsls	r1, r2, #31
   d4fe2:	bf5c      	itt	pl
   d4fe4:	2201      	movpl	r2, #1
   d4fe6:	601a      	strpl	r2, [r3, #0]
   d4fe8:	4b0a      	ldr	r3, [pc, #40]	; (d5014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4fea:	681a      	ldr	r2, [r3, #0]
   d4fec:	07d2      	lsls	r2, r2, #31
   d4fee:	bf5c      	itt	pl
   d4ff0:	2201      	movpl	r2, #1
   d4ff2:	601a      	strpl	r2, [r3, #0]
   d4ff4:	4770      	bx	lr
   d4ff6:	bf00      	nop
   d4ff8:	2003e76c 	.word	0x2003e76c
   d4ffc:	2003e768 	.word	0x2003e768
   d5000:	2003e764 	.word	0x2003e764
   d5004:	2003e760 	.word	0x2003e760
   d5008:	2003e75c 	.word	0x2003e75c
   d500c:	2003e758 	.word	0x2003e758
   d5010:	2003e754 	.word	0x2003e754
   d5014:	2003e750 	.word	0x2003e750

000d5018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5018:	4b24      	ldr	r3, [pc, #144]	; (d50ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d501a:	681a      	ldr	r2, [r3, #0]
   d501c:	07d0      	lsls	r0, r2, #31
   d501e:	bf5c      	itt	pl
   d5020:	2201      	movpl	r2, #1
   d5022:	601a      	strpl	r2, [r3, #0]
   d5024:	4b22      	ldr	r3, [pc, #136]	; (d50b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5026:	681a      	ldr	r2, [r3, #0]
   d5028:	07d1      	lsls	r1, r2, #31
   d502a:	bf5c      	itt	pl
   d502c:	2201      	movpl	r2, #1
   d502e:	601a      	strpl	r2, [r3, #0]
   d5030:	4b20      	ldr	r3, [pc, #128]	; (d50b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5032:	681a      	ldr	r2, [r3, #0]
   d5034:	07d2      	lsls	r2, r2, #31
   d5036:	bf5c      	itt	pl
   d5038:	2201      	movpl	r2, #1
   d503a:	601a      	strpl	r2, [r3, #0]
   d503c:	4b1e      	ldr	r3, [pc, #120]	; (d50b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d503e:	681a      	ldr	r2, [r3, #0]
   d5040:	07d0      	lsls	r0, r2, #31
   d5042:	bf5c      	itt	pl
   d5044:	2201      	movpl	r2, #1
   d5046:	601a      	strpl	r2, [r3, #0]
   d5048:	4b1c      	ldr	r3, [pc, #112]	; (d50bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d504a:	681a      	ldr	r2, [r3, #0]
   d504c:	07d1      	lsls	r1, r2, #31
   d504e:	bf5c      	itt	pl
   d5050:	2201      	movpl	r2, #1
   d5052:	601a      	strpl	r2, [r3, #0]
   d5054:	4b1a      	ldr	r3, [pc, #104]	; (d50c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5056:	681a      	ldr	r2, [r3, #0]
   d5058:	07d2      	lsls	r2, r2, #31
   d505a:	bf5c      	itt	pl
   d505c:	2201      	movpl	r2, #1
   d505e:	601a      	strpl	r2, [r3, #0]
   d5060:	4b18      	ldr	r3, [pc, #96]	; (d50c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5062:	681a      	ldr	r2, [r3, #0]
   d5064:	07d0      	lsls	r0, r2, #31
   d5066:	bf5c      	itt	pl
   d5068:	2201      	movpl	r2, #1
   d506a:	601a      	strpl	r2, [r3, #0]
   d506c:	4b16      	ldr	r3, [pc, #88]	; (d50c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d506e:	681a      	ldr	r2, [r3, #0]
   d5070:	07d1      	lsls	r1, r2, #31
   d5072:	bf5c      	itt	pl
   d5074:	2201      	movpl	r2, #1
   d5076:	601a      	strpl	r2, [r3, #0]
   d5078:	4b14      	ldr	r3, [pc, #80]	; (d50cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d507a:	681a      	ldr	r2, [r3, #0]
   d507c:	07d2      	lsls	r2, r2, #31
   d507e:	bf5c      	itt	pl
   d5080:	2201      	movpl	r2, #1
   d5082:	601a      	strpl	r2, [r3, #0]
   d5084:	4b12      	ldr	r3, [pc, #72]	; (d50d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5086:	681a      	ldr	r2, [r3, #0]
   d5088:	07d0      	lsls	r0, r2, #31
   d508a:	bf5c      	itt	pl
   d508c:	2201      	movpl	r2, #1
   d508e:	601a      	strpl	r2, [r3, #0]
   d5090:	4b10      	ldr	r3, [pc, #64]	; (d50d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5092:	681a      	ldr	r2, [r3, #0]
   d5094:	07d1      	lsls	r1, r2, #31
   d5096:	bf5c      	itt	pl
   d5098:	2201      	movpl	r2, #1
   d509a:	601a      	strpl	r2, [r3, #0]
   d509c:	4b0e      	ldr	r3, [pc, #56]	; (d50d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d509e:	681a      	ldr	r2, [r3, #0]
   d50a0:	07d2      	lsls	r2, r2, #31
   d50a2:	bf5c      	itt	pl
   d50a4:	2201      	movpl	r2, #1
   d50a6:	601a      	strpl	r2, [r3, #0]
   d50a8:	4770      	bx	lr
   d50aa:	bf00      	nop
   d50ac:	2003e79c 	.word	0x2003e79c
   d50b0:	2003e798 	.word	0x2003e798
   d50b4:	2003e794 	.word	0x2003e794
   d50b8:	2003e790 	.word	0x2003e790
   d50bc:	2003e78c 	.word	0x2003e78c
   d50c0:	2003e788 	.word	0x2003e788
   d50c4:	2003e784 	.word	0x2003e784
   d50c8:	2003e780 	.word	0x2003e780
   d50cc:	2003e77c 	.word	0x2003e77c
   d50d0:	2003e778 	.word	0x2003e778
   d50d4:	2003e774 	.word	0x2003e774
   d50d8:	2003e770 	.word	0x2003e770

000d50dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d50dc:	4b24      	ldr	r3, [pc, #144]	; (d5170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d50de:	681a      	ldr	r2, [r3, #0]
   d50e0:	07d0      	lsls	r0, r2, #31
   d50e2:	bf5c      	itt	pl
   d50e4:	2201      	movpl	r2, #1
   d50e6:	601a      	strpl	r2, [r3, #0]
   d50e8:	4b22      	ldr	r3, [pc, #136]	; (d5174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d50ea:	681a      	ldr	r2, [r3, #0]
   d50ec:	07d1      	lsls	r1, r2, #31
   d50ee:	bf5c      	itt	pl
   d50f0:	2201      	movpl	r2, #1
   d50f2:	601a      	strpl	r2, [r3, #0]
   d50f4:	4b20      	ldr	r3, [pc, #128]	; (d5178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d50f6:	681a      	ldr	r2, [r3, #0]
   d50f8:	07d2      	lsls	r2, r2, #31
   d50fa:	bf5c      	itt	pl
   d50fc:	2201      	movpl	r2, #1
   d50fe:	601a      	strpl	r2, [r3, #0]
   d5100:	4b1e      	ldr	r3, [pc, #120]	; (d517c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5102:	681a      	ldr	r2, [r3, #0]
   d5104:	07d0      	lsls	r0, r2, #31
   d5106:	bf5c      	itt	pl
   d5108:	2201      	movpl	r2, #1
   d510a:	601a      	strpl	r2, [r3, #0]
   d510c:	4b1c      	ldr	r3, [pc, #112]	; (d5180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d510e:	681a      	ldr	r2, [r3, #0]
   d5110:	07d1      	lsls	r1, r2, #31
   d5112:	bf5c      	itt	pl
   d5114:	2201      	movpl	r2, #1
   d5116:	601a      	strpl	r2, [r3, #0]
   d5118:	4b1a      	ldr	r3, [pc, #104]	; (d5184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d511a:	681a      	ldr	r2, [r3, #0]
   d511c:	07d2      	lsls	r2, r2, #31
   d511e:	bf5c      	itt	pl
   d5120:	2201      	movpl	r2, #1
   d5122:	601a      	strpl	r2, [r3, #0]
   d5124:	4b18      	ldr	r3, [pc, #96]	; (d5188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5126:	681a      	ldr	r2, [r3, #0]
   d5128:	07d0      	lsls	r0, r2, #31
   d512a:	bf5c      	itt	pl
   d512c:	2201      	movpl	r2, #1
   d512e:	601a      	strpl	r2, [r3, #0]
   d5130:	4b16      	ldr	r3, [pc, #88]	; (d518c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5132:	681a      	ldr	r2, [r3, #0]
   d5134:	07d1      	lsls	r1, r2, #31
   d5136:	bf5c      	itt	pl
   d5138:	2201      	movpl	r2, #1
   d513a:	601a      	strpl	r2, [r3, #0]
   d513c:	4b14      	ldr	r3, [pc, #80]	; (d5190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d513e:	681a      	ldr	r2, [r3, #0]
   d5140:	07d2      	lsls	r2, r2, #31
   d5142:	bf5c      	itt	pl
   d5144:	2201      	movpl	r2, #1
   d5146:	601a      	strpl	r2, [r3, #0]
   d5148:	4b12      	ldr	r3, [pc, #72]	; (d5194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d514a:	681a      	ldr	r2, [r3, #0]
   d514c:	07d0      	lsls	r0, r2, #31
   d514e:	bf5c      	itt	pl
   d5150:	2201      	movpl	r2, #1
   d5152:	601a      	strpl	r2, [r3, #0]
   d5154:	4b10      	ldr	r3, [pc, #64]	; (d5198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5156:	681a      	ldr	r2, [r3, #0]
   d5158:	07d1      	lsls	r1, r2, #31
   d515a:	bf5c      	itt	pl
   d515c:	2201      	movpl	r2, #1
   d515e:	601a      	strpl	r2, [r3, #0]
   d5160:	4b0e      	ldr	r3, [pc, #56]	; (d519c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5162:	681a      	ldr	r2, [r3, #0]
   d5164:	07d2      	lsls	r2, r2, #31
   d5166:	bf5c      	itt	pl
   d5168:	2201      	movpl	r2, #1
   d516a:	601a      	strpl	r2, [r3, #0]
   d516c:	4770      	bx	lr
   d516e:	bf00      	nop
   d5170:	2003e7cc 	.word	0x2003e7cc
   d5174:	2003e7c8 	.word	0x2003e7c8
   d5178:	2003e7c4 	.word	0x2003e7c4
   d517c:	2003e7c0 	.word	0x2003e7c0
   d5180:	2003e7bc 	.word	0x2003e7bc
   d5184:	2003e7b8 	.word	0x2003e7b8
   d5188:	2003e7b4 	.word	0x2003e7b4
   d518c:	2003e7b0 	.word	0x2003e7b0
   d5190:	2003e7ac 	.word	0x2003e7ac
   d5194:	2003e7a8 	.word	0x2003e7a8
   d5198:	2003e7a4 	.word	0x2003e7a4
   d519c:	2003e7a0 	.word	0x2003e7a0

000d51a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51a0:	4b18      	ldr	r3, [pc, #96]	; (d5204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51a2:	681a      	ldr	r2, [r3, #0]
   d51a4:	07d1      	lsls	r1, r2, #31
   d51a6:	bf5c      	itt	pl
   d51a8:	2201      	movpl	r2, #1
   d51aa:	601a      	strpl	r2, [r3, #0]
   d51ac:	4b16      	ldr	r3, [pc, #88]	; (d5208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51ae:	681a      	ldr	r2, [r3, #0]
   d51b0:	07d2      	lsls	r2, r2, #31
   d51b2:	bf5c      	itt	pl
   d51b4:	2201      	movpl	r2, #1
   d51b6:	601a      	strpl	r2, [r3, #0]
   d51b8:	4b14      	ldr	r3, [pc, #80]	; (d520c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51ba:	681a      	ldr	r2, [r3, #0]
   d51bc:	07d0      	lsls	r0, r2, #31
   d51be:	bf5c      	itt	pl
   d51c0:	2201      	movpl	r2, #1
   d51c2:	601a      	strpl	r2, [r3, #0]
   d51c4:	4b12      	ldr	r3, [pc, #72]	; (d5210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d51c6:	681a      	ldr	r2, [r3, #0]
   d51c8:	07d1      	lsls	r1, r2, #31
   d51ca:	bf5c      	itt	pl
   d51cc:	2201      	movpl	r2, #1
   d51ce:	601a      	strpl	r2, [r3, #0]
   d51d0:	4b10      	ldr	r3, [pc, #64]	; (d5214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d51d2:	681a      	ldr	r2, [r3, #0]
   d51d4:	07d2      	lsls	r2, r2, #31
   d51d6:	bf5c      	itt	pl
   d51d8:	2201      	movpl	r2, #1
   d51da:	601a      	strpl	r2, [r3, #0]
   d51dc:	4b0e      	ldr	r3, [pc, #56]	; (d5218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d51de:	681a      	ldr	r2, [r3, #0]
   d51e0:	07d0      	lsls	r0, r2, #31
   d51e2:	bf5c      	itt	pl
   d51e4:	2201      	movpl	r2, #1
   d51e6:	601a      	strpl	r2, [r3, #0]
   d51e8:	4b0c      	ldr	r3, [pc, #48]	; (d521c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d51ea:	681a      	ldr	r2, [r3, #0]
   d51ec:	07d1      	lsls	r1, r2, #31
   d51ee:	bf5c      	itt	pl
   d51f0:	2201      	movpl	r2, #1
   d51f2:	601a      	strpl	r2, [r3, #0]
   d51f4:	4b0a      	ldr	r3, [pc, #40]	; (d5220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d51f6:	681a      	ldr	r2, [r3, #0]
   d51f8:	07d2      	lsls	r2, r2, #31
   d51fa:	bf5c      	itt	pl
   d51fc:	2201      	movpl	r2, #1
   d51fe:	601a      	strpl	r2, [r3, #0]
   d5200:	4770      	bx	lr
   d5202:	bf00      	nop
   d5204:	2003e7ec 	.word	0x2003e7ec
   d5208:	2003e7e8 	.word	0x2003e7e8
   d520c:	2003e7e4 	.word	0x2003e7e4
   d5210:	2003e7e0 	.word	0x2003e7e0
   d5214:	2003e7dc 	.word	0x2003e7dc
   d5218:	2003e7d8 	.word	0x2003e7d8
   d521c:	2003e7d4 	.word	0x2003e7d4
   d5220:	2003e7d0 	.word	0x2003e7d0

000d5224 <__cxa_atexit>:
   d5224:	b510      	push	{r4, lr}
   d5226:	4c05      	ldr	r4, [pc, #20]	; (d523c <__cxa_atexit+0x18>)
   d5228:	4613      	mov	r3, r2
   d522a:	b12c      	cbz	r4, d5238 <__cxa_atexit+0x14>
   d522c:	460a      	mov	r2, r1
   d522e:	4601      	mov	r1, r0
   d5230:	2002      	movs	r0, #2
   d5232:	f3af 8000 	nop.w
   d5236:	bd10      	pop	{r4, pc}
   d5238:	4620      	mov	r0, r4
   d523a:	bd10      	pop	{r4, pc}
   d523c:	00000000 	.word	0x00000000

000d5240 <memcpy>:
   d5240:	b510      	push	{r4, lr}
   d5242:	1e43      	subs	r3, r0, #1
   d5244:	440a      	add	r2, r1
   d5246:	4291      	cmp	r1, r2
   d5248:	d004      	beq.n	d5254 <memcpy+0x14>
   d524a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d524e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5252:	e7f8      	b.n	d5246 <memcpy+0x6>
   d5254:	bd10      	pop	{r4, pc}

000d5256 <memset>:
   d5256:	4402      	add	r2, r0
   d5258:	4603      	mov	r3, r0
   d525a:	4293      	cmp	r3, r2
   d525c:	d002      	beq.n	d5264 <memset+0xe>
   d525e:	f803 1b01 	strb.w	r1, [r3], #1
   d5262:	e7fa      	b.n	d525a <memset+0x4>
   d5264:	4770      	bx	lr
	...

000d5268 <srand>:
   d5268:	b538      	push	{r3, r4, r5, lr}
   d526a:	4b12      	ldr	r3, [pc, #72]	; (d52b4 <srand+0x4c>)
   d526c:	681c      	ldr	r4, [r3, #0]
   d526e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5270:	4605      	mov	r5, r0
   d5272:	b9d3      	cbnz	r3, d52aa <srand+0x42>
   d5274:	2018      	movs	r0, #24
   d5276:	f7ff f917 	bl	d44a8 <malloc>
   d527a:	f243 330e 	movw	r3, #13070	; 0x330e
   d527e:	63a0      	str	r0, [r4, #56]	; 0x38
   d5280:	8003      	strh	r3, [r0, #0]
   d5282:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5286:	8043      	strh	r3, [r0, #2]
   d5288:	f241 2334 	movw	r3, #4660	; 0x1234
   d528c:	8083      	strh	r3, [r0, #4]
   d528e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5292:	80c3      	strh	r3, [r0, #6]
   d5294:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5298:	8103      	strh	r3, [r0, #8]
   d529a:	2305      	movs	r3, #5
   d529c:	8143      	strh	r3, [r0, #10]
   d529e:	230b      	movs	r3, #11
   d52a0:	8183      	strh	r3, [r0, #12]
   d52a2:	2201      	movs	r2, #1
   d52a4:	2300      	movs	r3, #0
   d52a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d52aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d52ac:	2200      	movs	r2, #0
   d52ae:	611d      	str	r5, [r3, #16]
   d52b0:	615a      	str	r2, [r3, #20]
   d52b2:	bd38      	pop	{r3, r4, r5, pc}
   d52b4:	2003e4c0 	.word	0x2003e4c0

000d52b8 <strlen>:
   d52b8:	4603      	mov	r3, r0
   d52ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d52be:	2a00      	cmp	r2, #0
   d52c0:	d1fb      	bne.n	d52ba <strlen+0x2>
   d52c2:	1a18      	subs	r0, r3, r0
   d52c4:	3801      	subs	r0, #1
   d52c6:	4770      	bx	lr

000d52c8 <dynalib_user>:
   d52c8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d52d8:	0000 0000                                   ....

000d52dc <_ZTVN5spark13EthernetClassE>:
	...
   d52e4:	4527 000d 451d 000d 4513 000d 4509 000d     'E...E...E...E..
   d52f4:	44fd 000d 44f1 000d 44e5 000d 44dd 000d     .D...D...D...D..
   d5304:	44d3 000d 44c9 000d 4d85 000d               .D...D...M..

000d5310 <_ZTV8SPIClass>:
	...
   d5318:	4545 000d 4547 000d 6162 6475 5300 7265     EE..GE..baud.Ser
   d5328:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d5338:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d5348:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d5358:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d5368:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d5378:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d5388:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d5398:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d53a8:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d53b8:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d53c8:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d53d8:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d53e8:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d53f8:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d5408:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d5418:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d5428:	0065 0000                                   e...

000d542c <_ZTV9IPAddress>:
	...
   d5434:	47a5 000d 4795 000d 4797 000d               .G...G...G..

000d5440 <_ZTV9USBSerial>:
	...
   d5448:	487d 000d 48cd 000d 48db 000d 45ad 000d     }H...H...H...E..
   d5458:	48b9 000d 487f 000d 4895 000d 48c7 000d     .H...H...H...H..
   d5468:	48ab 000d 4879 000d                         .H..yH..

000d5470 <_ZTV11USARTSerial>:
	...
   d5478:	4981 000d 49d1 000d 49df 000d 45ad 000d     .I...I...I...E..
   d5488:	4995 000d 49b7 000d 49a3 000d 49cb 000d     .I...I...I...I..
   d5498:	4983 000d 4987 000d                         .I...I..

000d54a0 <_ZTV7TwoWire>:
	...
   d54a8:	4ab9 000d 4b03 000d 4adb 000d 4abb 000d     .J...K...J...J..
   d54b8:	4ae3 000d 4aeb 000d 4af3 000d 4afb 000d     .J...J...J...J..

000d54c8 <_ZTVN5spark9MeshClassE>:
	...
   d54d0:	4b9b 000d 4b91 000d 4b87 000d 4b7d 000d     .K...K...K..}K..
   d54e0:	4b71 000d 4b65 000d 4b59 000d 4b51 000d     qK..eK..YK..QK..
   d54f0:	4b47 000d 4b3d 000d 4d85 000d               GK..=K...M..

000d54fc <_ZTVN5spark9WiFiClassE>:
	...
   d5504:	4cff 000d 4cf5 000d 4ceb 000d 4ca1 000d     .L...L...L...L..
   d5514:	4cdf 000d 4cd3 000d 4cc7 000d 4cbf 000d     .L...L...L...L..
   d5524:	4cb5 000d 4cab 000d 4d85 000d               .L...L...M..

000d5530 <_ZTVN5spark12NetworkClassE>:
	...
   d5538:	4d1d 000d 4d27 000d 4d31 000d 4d3b 000d     .M..'M..1M..;M..
   d5548:	4d45 000d 4d51 000d 4d5d 000d 4d69 000d     EM..QM..]M..iM..
   d5558:	4d71 000d 4d7b 000d 4d85 000d               qM..{M...M..

000d5564 <__sf_fake_stdin>:
	...

000d5584 <__sf_fake_stdout>:
	...

000d55a4 <__sf_fake_stderr>:
	...
   d55c4:	0043                                        C.

000d55c6 <link_const_variable_data_end>:
	...

000d55c8 <link_constructors_location>:
   d55c8:	000d415d 	.word	0x000d415d
   d55cc:	000d4531 	.word	0x000d4531
   d55d0:	000d4585 	.word	0x000d4585
   d55d4:	000d459d 	.word	0x000d459d
   d55d8:	000d465d 	.word	0x000d465d
   d55dc:	000d466d 	.word	0x000d466d
   d55e0:	000d46a5 	.word	0x000d46a5
   d55e4:	000d4c51 	.word	0x000d4c51
   d55e8:	000d4d09 	.word	0x000d4d09
   d55ec:	000d4e51 	.word	0x000d4e51
   d55f0:	000d4f01 	.word	0x000d4f01
   d55f4:	000d4f95 	.word	0x000d4f95
   d55f8:	000d5019 	.word	0x000d5019
   d55fc:	000d50dd 	.word	0x000d50dd
   d5600:	000d51a1 	.word	0x000d51a1

000d5604 <link_constructors_end>:
	...
